GO : Secure systems dev without segfaults
24 Jul 2013
Tags: go

Jameel Haffejee
@rc1140

* What is this Talk About?

Learning Stuff (Mostly Go)

* So what is Go
    -Concurrent
    -Staticly typed
    -Garbage Collected

* Why is Go better than X
This is the first question everyone asks. 
People rarely like to change languages so there is always kick back
YMMV
Next few slides cover the common languages

* C
    +GC
    +No more segfaults
    +Built in concurrency
    -Slower

* Cpp
    +GC
    +No more segfaults
    +Built in concurrency
    -Slower

* Java
    +Less boiler plate code
    +Faster

* C#
    +No runtime frameworks required
    +Faster
    +Cross Compilation

* (Functional Lang)
    +Faster
    -Not made of unicorn dust (i.e. you can never convince a functional programmer to use anything else)

* Problems we want to tackle
    -segfaults
    -buffer overflows
    -complicated builds

* Before Jumping into how Go works around these problems lets introduce Go

* Hello World

  package main
  
  import "fmt"
  
  func main() {
      fmt.Println("Hello, 世界")
  }

* Explain interface drive development

* Concurrency  Example

* Scaling example

* Explain how Go solves the problems mentioned earlier
Most of the problems are solved by default because of the way Go is built , so nothing special needs to be done.
